openapi: 3.0.3
info:
  title:  Employee Management System 3.0
  description: |-
   The Employee Management System is a comprehensive software solution designed to streamline and automate various HR and employee-related processes within an organization. This project aims to improve efficiency, enhance data accuracy, and simplify workforce management. 
   
    The project aims to develop an Office Management System that encompasses key functionalities, including office calculations, attendance tracking, and task assignment and submission. This integrated system will enhance office productivity, streamline administrative tasks, and facilitate efficient communication and collaboration among employees.
    
    Some useful links:
    - [The EMS repository](https://github.com/geniekarima/Employee_Management_Api.git)
    - [The source API definition for the EMS](https://github.com/geniekarima/swagger-EMS)
   
  # termsOfService: http://swagger.io/terms/
  contact:
    email: Contact@genieinfo.tech
  # license:
  #   name: Apache 2.0
  #   url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
# externalDocs:
  # description: Find out more about Swagger
  # url: http://swagger.io
servers:
  - url: https://ems.ctgsociety.org/api
tags:
  - name: user
    description: Operations about user
  - name: owner
    description: Operations about employee
  - name: employee
    description: Operations about employee
paths:
  /auth/add-employee:
    post:
      tags:
        - owner
      summary: Create employee
      description: This can only be done by the logged in owner.
      operationId: createUser
      requestBody:
        description: Created employee object
        required: true
        content:
          application/json:
           schema:
            type: object
            properties:
              username:
                type: string
                example: john_doe
              email:
                type: string
                format: email
                example: john@example.com
              password:
                type: string
                example: password123
              designation:
                type: string
                example: Manager
      responses:
           200:
             description: Successful operation
             content:
               application/json:
                 schema:
                    $ref: '#/components/schemas/Employee'
               application/xml:
                 schema:
                   $ref: '#/components/schemas/Employee'
                   
  /owner/list:
    get:
      tags:
        - owner
      summary: Get a list of employees
      description: Retrieve a paginated list of employees. This can only be done by the owner.
      operationId: listEmployees
      parameters:
      - name: take
        in: query
        description: Number of records to retrieve
        required: false
        schema:
          type: integer
          default: 10
      
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                     type: string
                     example: All Employees List
                  data:
                     type: array
                     items:
                       $ref: '#/components/schemas/EmployeeProfile'
        401:
          description: Unauthorized
        403:
          description: Forbidden - Only owners can access this endpoint
        500:
          description: Internal server error
          
          
  /owner/report:
    get:
      tags:
        - owner
      summary: Get a list of employee reports
      description: Retrieve a paginated list of employee reports.
      operationId: listEmployeeReports
      parameters:
      - name: take
        in: query
        description: Number of records to take
        required: false
        schema:
          type: integer
          example: 5
      - name: fromdate
        in: query
        description: From date filter
        required: false
        schema:
          type: string
          format: date
      - name: todate
        in: query
        description: To date filter
        required: false
        schema:
          type: string
          format: date
      - name: sort_direction
        in: query
        description: Sort direction (asc or desc)
        required: false
        schema:
          type: string
          example: desc
      - name: sort_by
        in: query
        description: Sort by (date or username)
        required: false
        schema:
          type: string
          example: date
      - name: employee_id
        in: query
        description: Employee ID filter
        required: false
        schema:
          type: integer
          example: 123
      - name: is_pdf
        in: query
        description: Generate PDF (1 for yes, 0 for no)
        required: false
        schema:
          type: integer
          example: 1
      - name: email
        in: query
        description: Email address for sending the PDF
        required: false
        schema:
          type: string
          example: user@example.com
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                     type: string
                     example: Employee Report List and PDF available for download
                  data:
                    type: object
                    properties:
                      pdf_url:
                         type: string
                         example: http://example.com/pdfs/employees_report_20230904120000.pdf
                      reportResource:
                        type: array
                        items:
                          $ref: '#/components/schemas/EmployeeReport'
        401:
          description: Unauthorized
        403:
          description: Forbidden - Only owners can access this endpoint
        500:
          description: Internal server error
          
                 
  /employee/checkin:
    post:
      tags:
        - employee
      summary: Employee Check-In
      description: Record an employee's check-in.
      operationId: checkIn
      responses:
        200:
          description: Check-In Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckIn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                someProperty:
                  type: string
                  description: Some property description
                  example: SomeValue
            
            
  /employee/start-break:
    post:
      tags:
        - employee
      summary: Start Employee Break
      description: Start an employee's break.
      operationId: startBreak
      security:
        - BearerAuth: []
      responses:
        200:
          description: Break Started Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartBreak'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
                
  
  /employee/end-break:
    post:
      tags:
        - employee
      summary: End Employee Break
      description: End an employee's break.
      operationId: endBreak
      security:
        - BearerAuth: []
      responses:
        200:
          description: Break Ended Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndBreak'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
                
                
  /employee/checkout:
      post:
        tags:
          - employee
        summary: Employee Check-Out
        description: Record an employee's check-out.
        operationId: checkOut
        security:
          - BearerAuth: []
        responses:
          200:
            description: Check-Out Successful
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CheckOut'
          400:
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
                  
                  
                  
                  
  /employee/profile/update:
    post:
      tags:
        - employee
      summary: Update Employee Profile
      description: Update an employee's profile information.
      operationId: updateEmployeeProfile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmployeeProfileRequest'
      responses:
        200:
          description: Employee Profile Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateEmployeeProfileResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
                
  /employee/auth-project-list:
    get:
      tags:
        - employee
      summary: Get Authenticated Employee's Assigned Projects
      description: Get the list of projects assigned to the authenticated employee.
      operationId: getAuthProjectList
      security:
        - BearerAuth: []
      responses:
        200:
          description: List of Assigned Projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthAssignedProject'
        401:
          description: Unauthorized
          
          
  /employee/task/add:
    post:
      tags:
        - employee
      summary: Add a Task
      description: Create a new task for the authenticated user.
      operationId: addTask
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTaskRequest'
      responses:
        201:
          description: Task Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
                
                
  /employee/task/list:
      get:
        tags:
          - employee
        summary: Get Authenticated Employee's Task List
        description: Retrieve a list of tasks associated with the authenticated user.
        operationId: getAuthUserTaskList
        security:
          - BearerAuth: []
        responses:
          200:
            description: Successful response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmployeeWithProjectsAndTasks'
          401:
            $ref: '#/components/schemas/Error'
          500:
            $ref: '#/components/schemas/Error'
            
            
            
            
  /employee/task/update:
    post:
      tags:
        - employee
      summary: Update a Task
      description: Update a task associated with the authenticated user.
      operationId: updateTask
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdateResponse'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/schemas/Error'
          
          
          
  /employee/task/delete:
    post:
      tags:
        - employee
      summary: Delete a Task
      description: Delete a task associated with the authenticated user.
      operationId: deleteTask
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: query
          description: ID of the task to delete
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDeleteResponse'
        '401':
          $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/schemas/Error'
                
                
                
                
  /owner/project-add:
     post:
        tags:
          - owner
        summary: Add a Project
        description: Add a project with the specified name.
        operationId: addProject
        security:
          - BearerAuth: []
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectCreateRequest'
        responses:
          '200':
            description: Project created successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProjectCreateResponse'
          '401':
            $ref: '#/components/schemas/Error'
          '500':
            $ref: '#/components/schemas/Error'
            
            
  /owner/project-list:
    get:
      tags:
        - owner
      summary: Get All Projects
      description: Retrieve a list of all projects.
      operationId: getAllProjects
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'
        '401':
          $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/schemas/Error'
          
          
  /owner/project-update:
    post:
      tags:
        - owner
      summary: Update a Project
      description: Update a project with the specified ID, name, and status.
      operationId: updateProject
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateRequest'
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUpdateResponse'
        '401':
          $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/schemas/ErrorNotFound'
        '500':
          $ref: '#/components/schemas/Error'
          
          
  /owner/project-delete:
    post:
      tags:
        - owner
      summary: Delete a Project
      description: Delete a project with the specified ID.
      operationId: deleteProject
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the project to delete.
      responses:
        '204':
          description: Project deleted successfully
        '401':
          $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/schemas/ErrorNotFound'
        '500':
          $ref: '#/components/schemas/Error'
          
          
  /owner/project-assign-add:
    post:
      tags:
        - owner
      summary: Add Project Assignment
      description: Assign a project to a Employees.
      operationId: addProjectAssignment
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectAssignmentRequest'
      responses:
        200:
          description: Project assigned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectAssignmentResponse'
        400:
          $ref: '#/components/schemas/Error'
        404:
          $ref: '#/components/schemas/ErrorNotFound'
          
          
          
          
  /owner/project-assign-list:
      get:
        tags:
          - owner
        summary: List Project Assignments
        description: Retrieve a list of project assignments.
        operationId: listProjectAssignments
        security:
          - BearerAuth: []
        responses:
          200:
            description: Project assignments retrieved successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProjectAssignmentListResponse'
          401:
            $ref: '#/components/schemas/Error'
          500:
            $ref: '#/components/schemas/ErrorNotFound'
            
            
            
            
  /owner/project-assign-update:
      post:
        tags:
          - owner
        summary: Update Project Assignment
        description: Update an existing project assignment.
        operationId: updateProjectAssignment
        security:
          - BearerAuth: []
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectAssignmentUpdateRequest'
        responses:
          200:
            description: Project assignment updated successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProjectAssignmentUpdateResponse'
          401:
            $ref: '#/components/schemas/Error'
          500:
            $ref: '#/components/schemas/ErrorNotFound'
            
            
            
  /owner/project-assign-delete:
    post:
      tags:
        -   owner
      summary: Delete Project Assignment
      description: Delete an existing project assignment.
      operationId: deleteProjectAssignment
      security:
        - BearerAuth: []
      parameters:
        - name: employee_id
          in: query
          required: true
          schema:
            type: integer
          description: The ID of the employee associated with the assignment.
        - name: project_id
          in: query
          required: true
          schema:
            type: integer
          description: The ID of the project associated with the assignment.
      responses:
        200:
          description: Project assignment deleted successfully
        401:
          $ref: '#/components/schemas/Error'
        404:
          $ref: '#/components/schemas/ErrorNotFound'
          
          
          
          
  /owner/task-list-show:
      get:
        tags:
          - owner
        summary: Get Task List of All Employees
        description: Retrieve a list of tasks for all employees.
        operationId: getAllEmployeesTaskList
        security:
          - BearerAuth: []
        responses:
          200:
            description: Successful response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmployeeWithProjectsAndTasks'
          401:
            $ref: '#/components/schemas/Error'
          500:
            $ref: '#/components/schemas/ErrorNotFound'
            
            
            
  /owner/employee-profile/show/{id}:
    get:
      tags:
        - owner
      summary: Get employee profile by owner
      description: Retrieve the profile of an employee as requested by the owner.
      operationId: ownerEmployeesProfileShow
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the employee
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Existing employee!"
                  data:
                    $ref: '#/components/schemas/EmployeeProfile'
                  type:
                    type: string
        '404':
          description: Employee not found
          
          
          
  /owner/employee-profile/edit:
    post:
      tags:
        - owner
      summary: Update employee profile by owner
      description: Update the profile of an employee as requested by the owner.
      operationId: ownerEmployeesProfileUpdate
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerUpdateEmployeeProfileRequest'
      responses:
        200:
          description: Employee Profile Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateEmployeeProfileResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
                
                
                
  /owner/employee-profile/deactivate/{id}:
    post:
      tags:
        - owner
      summary: Deactivate employee profile by owner
      description: Deactivate the profile of an employee as requested by the owner.
      operationId: ownerEmployeesProfileDeactivate
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the employee
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ID of the employee (you may include this for clarity)
                is_active:
                  type: boolean
                  description: Set to `true` to deactivate the employee's profile
      responses:
        200:
          description: Employee Deactivated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeactivateEmployeeResponse'
        404:
          description: Employee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
                
                
                
  /owner/employee-profile/delete{id}:
    post:
      tags:
        - owner
      summary: Delete employee profile by owner
      description: Delete the profile of an employee as requested by the owner.
      operationId: ownerDeleteEmployeesProfile
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the employee to delete
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteEmployeeProfileRequest'
      responses:
        200:
          description: Employee Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteEmployeeProfileResponse'
        404:
          description: Employee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'



            

  /auth/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
          
  /auth/logout:
    post:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
       

  /auth/user:
    get:
      tags:
        - user
      summary: Get user profile
      description: ''
      operationId: getUserByName
      parameters: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeProfile'          
            application/xml:
              schema:
                $ref: '#/components/schemas/EmployeeProfile'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /auth/forget-password:
    post:
      tags:
        - user
      summary: Request password reset
      description: Request a password reset for a user account.
      operationId: forgetPassword
      parameters: []
      requestBody:
        description: User's email for password reset
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
               email:
                type: string
                format: email
              required:
               - email
      responses:
        '200':
          description: Password reset request successful
          content:
            application/json:
              schema:
                type: string
                example: 'Password reset request sent successfully.'
        '400':
          description: Invalid input (e.g., missing email)
        '404':
          description: User not found (if email doesn't exist in the system)
        
        default:
          description: successful operation
  /auth/verify-forget-password:
    post:
      tags:
        - user
      summary: Verify password reset request
      description: Verify a password reset request using a verification code.
      operationId: verifyForgetPassword
      requestBody:
        description: Verification code and new password
        required: true
        content:
         application/json:
          schema:
           type: object
           properties:
            verificationCode:
             type: string
             description: The verification code sent to the user's email.
            newPassword:
             type: string
             description: The new password to set.
           required:
           - verificationCode
           - newPassword
      responses:
        '400':
          description: Invalid input (e.g., missing verification code or new password)
        '401':
          description: Unauthorized (e.g., invalid verification code)
  /auth/reset-password:
    post:
      tags:
        - user
      summary: Reset user password
      description: Reset a user's password with a new one.
      operationId: resetPassword
      requestBody:
        description: User's email and new password
        required: true
        content:
         application/json:
          schema:
           type: object
           properties:
            email:
             type: string
             format: email
             description: The user's email address.
            newPassword:
             type: string
             description: The new password to set.
           required:
           - email
           - newPassword
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: string
                example: 'Password reset successful.'
        '400':
          description: Invalid input (e.g., missing email or new password)
        '401':
          description: Unauthorized (e.g., invalid email)
          
components:
  schemas:
    EmployeeProfile:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        usertype:
          type: integer
          description: User Status
          format: int32
          example: 1
        designation:  
          type: string
          example: 'Software Engineer'
        phone:
          type: string
          example: '123456'
        address:  
          type: string
          example: '123 Main St, City'
        image:  
          type: string
          format: uri
          example: 'https://example.com/user/image.jpg'
        birth_date:  
          type: string
          format: date
          example: '1990-01-01'
      xml:
        name: user
    Employee:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        designation:  
          type: string
          example: 'Software Engineer'
      xml:
        name: user
    EmployeeReport:
      type: object
      properties:
        date:
          type: string
          format: date
          example: '2023-08-28'
        username:
          type: string
          example: Jerin
        check_in:
          type: string
          example: '09:04'
        check_out:
          type: string
          example: '09:04'
        breakTasks:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              employee_report_id:
                type: integer
              break_start:
                type: string
                format: datetime
              break_end:
                type: string
                format: datetime
        net_work_hours:
          type: string
          example: '-1:-2'
        total_office_hours:
          type: string
          example: '0:0'
          
          
    CheckIn:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the operation was successful.
        code:
          type: integer
          description: HTTP status code.
        message:
          type: string
          description: A message indicating the result of the operation.
        data:
          type: object
          description: Additional data related to the check-in.
          properties:
            employee_id:
              type: integer
              description: The ID of the employee who checked in.
            check_in:
              type: string
              format: date-time
              description: The timestamp of the check-in.
            date:
              type: string
              format: date
              description: The date of the check-in.
            updated_at:
              type: string
              format: date-time
              description: The timestamp of when the record was updated.
            created_at:
              type: string
              format: date-time
              description: The timestamp of when the record was created.
            id:
              type: integer
              description: The unique identifier of the check-in record.
              
    StartBreak:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the operation was successful.
        code:
          type: integer
          description: HTTP status code.
        message:
          type: string
          description: A message indicating the result of the operation.
        data:
          type: object
          description: Additional data related to the break.
          properties:
            employee_report_id:
              type: integer
              description: The ID of the employee's check-in report associated with this break.
            break_start:
              type: string
              format: date-time
              description: The timestamp when the break started.
            updated_at:
              type: string
              format: date-time
              description: The timestamp of when the break record was updated.
            created_at:
              type: string
              format: date-time
              description: The timestamp of when the break record was created.
            id:
              type: integer
              description: The unique identifier of the break record.
              
              
    EndBreak:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the operation was successful.
        code:
          type: integer
          description: HTTP status code.
        message:
          type: string
          description: A message indicating the result of the operation.
        data:
          type: object
          description: Additional data related to the ended break.
          properties:
            id:
              type: integer
              description: The unique identifier of the ended break.
            employee_report_id:
              type: integer
              description: The ID of the employee's check-in report associated with this break.
            break_start:
              type: string
              format: date-time
              description: The timestamp when the break started.
            break_end:
              type: string
              format: date-time
              description: The timestamp when the break ended.
            created_at:
              type: string
              format: date-time
              description: The timestamp of when the break record was created.
            updated_at:
              type: string
              format: date-time
              description: The timestamp of when the break record was last updated.
       
              
              
    CheckOut:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the operation was successful.
        code:
          type: integer
          description: HTTP status code.
        message:
          type: string
          description: A message indicating the result of the operation.
        data:
          type: object
          description: Additional data related to the check-out.
          properties:
            id:
              type: integer
              description: The unique identifier of the check-out report.
            employee_id:
              type: integer
              description: The ID of the employee.
            date:
              type: string
              format: date
              description: The date of the check-in.
            check_in:
              type: string
              format: time
              description: The time when the employee checked in.
            check_out:
              type: string
              format: date-time
              description: The timestamp when the employee checked out.
            created_at:
              type: string
              format: date-time
              description: The timestamp of when the report record was created.
            updated_at:
              type: string
              format: date-time
              description: The timestamp of when the report record was last updated.
        type:
          type: string
              

    UpdateEmployeeProfileRequest:
      type: object
      properties:
        username:
          type: string
          description: New username for the employee.
        password:
          type: string
          description: New password for the employee.
        phone:
          type: string
          description: New phone number for the employee.
        address:
          type: string
          description: New address for the employee.
        birth_date:
          type: string
          format: date
          description: New birth date for the employee.
        image:
          type: string
          description: New image URL for the employee's profile picture.
      required:
        - username
        
        
    UpdateEmployeeProfileResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the operation was successful.
        code:
          type: integer
          description: HTTP status code.
        message:
          type: string
          description: A message indicating the result of the operation.
        data:
          type: object
          properties:
            id:
              type: integer
              description: The unique identifier of the employee.
            username:
              type: string
              description: The updated username of the employee.
            email:
              type: string
              description: The email of the employee not updated.
            usertype:
              type: string
              description: The user type not updated (e.g., "employee").
            designation:
              type: string
              description: The  designation of the employee not updated.
            phone:
              type: string
              description: The updated phone number of the employee.
            address:
              type: string
              description: The updated address of the employee.
            image:
              type: string
              description: The updated image URL for the employee's profile picture.
            birth_date:
              type: string
              format: date
              description: The updated birth date of the employee.


    AuthAssignedProject:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        status:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      example:
        id: 1
        name: prize-bond
        status: 1
        created_at: "2023-09-09T15:33:11.000000Z"
        updated_at: "2023-09-09T15:33:11.000000Z"
      
        
        
    AddTaskRequest:
      type: object
      properties:
        project_id:
          type: integer
          format: int64
          description: The ID of the project to which the task belongs.
        title:
          type: string
          description: The title of the task.
        description:
          type: string
          description: A description of the task.
        dependency:
          type: string
          description: The task's dependency, if any.
        delay_reason:
          type: string
          description: The reason for any delays in the task.
        start_date:
          type: string
          format: date
          description: The start date of the task.
        end_date:
          type: string
          format: date
          description: The end date of the task.
        status:
          type: integer
          description: The status of the task (e.g., 0 for incomplete, 1 for complete).
      required:
        - project_id
        - title
        - description
        - start_date
        - end_date
        - status
        
        
    Task:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier for the task.
        project_id:
          type: integer
          format: int64
          description: The ID of the project to which the task belongs.
        title:
          type: string
          description: The title of the task.
        description:
          type: string
          description: A description of the task.
        dependency:
          type: string
          description: The task's dependency, if any.
        delay_reason:
          type: string
          description: The reason for any delays in the task.
        start_date:
          type: string
          format: date
          description: The start date of the task.
        end_date:
          type: string
          format: date
          description: The end date of the task.
        status:
          type: integer
          description: The status of the task (e.g., 0 for incomplete, 1 for complete).
        created_at:
          type: string
          format: date-time
          description: The date and time when the task was created.
        updated_at:
          type: string
          format: date-time
          description: The date and time when the task was last updated.

    TaskResponse:
      type: object
      properties:
        message:
          type: string
        data:
          $ref: '#/components/schemas/Task'
      example:
        message: Task created successfully
        data:
          id: 1
          project_id: 1
          title: Sample Task
          description: This is a sample task description.
          dependency: Sample Dependency
          delay_reason: No delays
          start_date: "2023-09-20"
          end_date: "2023-09-25"
          status: 0
          created_at: "2023-09-20T12:00:00.000000Z"
          updated_at: "2023-09-20T12:00:00.000000Z"
          
          
    TaskList:
      type: object
      properties:
        id:
          type: integer
          format: int64
        employee_id:
          type: integer
          format: int64
        project_id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        dependency:
          type: string
        delay_reason:
          type: string
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        status:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Project:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        status:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/TaskList'

    EmployeeWithProjectsAndTasks:
      type: object
      properties:
        user:
          type: array
          items:
            $ref: '#/components/schemas/EmployeeProfile'
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
            
            
        
    TaskUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the update was successful.
          example: true
        code:
          type: integer
          description: HTTP status code indicating the result.
          example: 200
        message:
          type: string
          description: A message indicating the result of the update.
          example: "Task updated successfully"
        data:
          type: object
          properties:
            id:
              type: integer
              description: The ID of the updated task.
              example: 10
            employee_id:
              type: integer
              description: The ID of the employee associated with the task.
              example: 4
            project_id:
              type: integer
              description: The ID of the project associated with the task.
              example: 2
            title:
              type: string
              description: The title of the task.
              example: "Task - Api Development section"
            description:
              type: string
              description: The description of the task.
              example: "Task Description"
            dependency:
              type: string
              description: The dependency value of the task.
              example: "Dependency Value"
            delay_reason:
              type: string
              description: The reason for any delay in the task.
              example: "Reason for Delay"
            start_date:
              type: string
              format: date
              description: The start date of the task (YYYY-MM-DD).
              example: "2023-09-05"
            end_date:
              type: string
              format: date
              description: The end date of the task (YYYY-MM-DD).
              example: "2023-09-10"
            status:
              type: string
              description: The status of the task (e.g., "on_going").
              example: "on_going"
            created_at:
              type: string
              format: date-time
              description: The timestamp when the task was created.
              example: "2023-09-11T03:38:00.000000Z"
            updated_at:
              type: string
              format: date-time
              description: The timestamp when the task was last updated.
              example: "2023-09-25T03:29:19.000000Z"
        type:
          type: string
          
          
    TaskDeleteResponse:
      type: object
      properties:
        message:
          type: string
          description: A message indicating the success of the operation.
          example: "Task deleted successfully"
        
        
    ProjectCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the project to be created.
          example: "Project Name"

    ProjectCreateResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the project creation was successful.
          example: true
        code:
          type: integer
          description: HTTP status code indicating the result.
          example: 200
        message:
          type: string
          description: A message indicating the result of the project creation.
          example: "Project created successfully"
        data:
          $ref: '#/components/schemas/ProjectCreate'
        type:
          type: string

    ProjectCreate:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the project.
          example: 5
        name:
          type: string
          description: The name of the project.
          example: "SASBD"
        updated_at:
          type: string
          format: date-time
          description: The timestamp when the project was last updated.
          example: "2023-09-25T04:52:37.000000Z"
        created_at:
          type: string
          format: date-time
          description: The timestamp when the project was created.
          example: "2023-09-25T04:52:37.000000Z"
          
    ProjectListResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the request was successful.
          example: true
        code:
          type: integer
          description: HTTP status code indicating the result.
          example: 200
        message:
          type: string
          description: A message indicating the result of the operation.
          example: "All Project List"
        data:
          type: array
          description: An array of project objects.
          items:
            $ref: '#/components/schemas/ProjectList'
        type:
          type: string

    ProjectList:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the project.
          example: 2
        name:
          type: string
          description: The name of the project.
          example: "EMS"
        status:
          type: integer
          description: The status of the project (e.g., 1 for active).
          example: 1
        created_at:
          type: string
          format: date-time
          description: The timestamp when the project was created.
          example: "2023-09-05T09:04:31.000000Z"
        updated_at:
          type: string
          format: date-time
          description: The timestamp when the project was last updated.
          example: "2023-09-05T09:04:31.000000Z"
          
          
    ProjectUpdateRequest:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the project to update.
          example: 1
        name:
          type: string
          description: The updated name of the project (optional).
          example: "Updated Project Name"
        status:
          type: boolean
          description: The updated status of the project (optional).
          example: true

    ProjectUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the project update was successful.
          example: true
        code:
          type: integer
          description: HTTP status code indicating the result.
          example: 200
        message:
          type: string
          description: A message indicating the result of the project update.
          example: "Project updated successfully"
        data:
          $ref: '#/components/schemas/ProjectList'
        type:
          type: string
          
    ProjectAssignmentRequest:
      type: object
      properties:
        project_id:
          type: integer
          description: The ID of the project to assign.
          example: 1
        employee_id:
          type: integer
          description: The ID of the employee to whom the project will be assigned.
          example: 5

    ProjectAssignmentResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the project assignment was successful.
          example: true
        code:
          type: integer
          description: HTTP status code indicating the result.
          example: 200
        message:
          type: string
          description: A message indicating the result of the project assignment.
          example: "Project assigned successfully"
        data:
          $ref: '#/components/schemas/ProjectAssign'
        type:
          type: string
          
          
    ProjectAssign:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the project assignment.
          example: 3
        employee_id:
          type: integer
          description: The ID of the employee associated with the assignment.
          example: 5
        project_id:
          type: integer
          description: The ID of the project associated with the assignment.
          example: 4
        created_at:
          type: string
          format: date-time
          description: The date and time when the assignment was created.
          example: "2023-09-10T07:26:28.000000Z"
        updated_at:
          type: string
          format: date-time
          description: The date and time when the assignment was last updated.
          example: "2023-09-25T09:21:01.000000Z"
      required:
        - employee_id
        - project_id
        
          
    ProjectAssignmentListResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the project assignments retrieval was successful.
          example: true
        code:
          type: integer
          description: HTTP status code indicating the result.
          example: 200
        message:
          type: string
          description: A message indicating the result of the project assignments retrieval.
          example: "Project assignments retrieved successfully"
        data:
          type: array
          description: An array of project assignments.
          items:
            type: object
            properties:
              user:
                $ref: '#/components/schemas/EmployeeProfile'
              projects:
                type: array
                description: An array of projects associated with the employee.
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: The ID of the project.
                      example: 2
                    name:
                      type: string
                      description: The name of the project.
                      example: "EMS"
                    status:
                      type: integer
                      description: The status of the project.
                      example: 1
                    created_at:
                      type: string
                      format: date-time
                      description: The date and time when the project was created.
                      example: "2023-09-05T09:04:31.000000Z"
                    updated_at:
                      type: string
                      format: date-time
                      description: The date and time when the project was last updated.
                      example: "2023-09-05T09:04:31.000000Z"
                    pivot:
                      type: object
                      properties:
                        employee_id:
                          type: integer
                          description: The ID of the employee associated with the project.
                          example: 13
                        project_id:
                          type: integer
                          description: The ID of the project associated with the employee.
                          example: 2
                          
                          
                        
    ProjectAssignmentUpdateRequest:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the project assignment to update.
          example: 13
        employee_id:
          type: integer
          description: The ID of the employee to whom the project assignment will be updated.
          example: 5
        project_id:
          type: integer
          description: The ID of the project to which the assignment will be updated.
          example: 3
    
    ProjectAssignmentUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the project assignment update was successful.
          example: true
        code:
          type: integer
          description: HTTP status code indicating the result.
          example: 200
        message:
          type: string
          description: A message indicating the result of the project assignment update.
          example: "Project assignment updated successfully"
        data:
          $ref: '#/components/schemas/ProjectAssign'  
        type:
          type: string
          
          

    OwnerUpdateEmployeeProfileRequest:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          description: ID of the employee to update
        designation:
          type: string
          description: New designation for the employee
        phone:
          type: string
          description: New phone number for the employee
        address:
          type: string
          description: New address for the employee
        birth_date:
          type: string
          format: date
          description: New birth date for the employee 
        image:
          type: string
          format: binary
          description: New image for the employee (binary data)
          
          
    DeactivateEmployeeResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "Employee Deactivated!"
        data:
          type: array
          items: {}
        type:
          type: string
          
          
          
    DeleteEmployeeProfileRequest:
      type: object
      properties:
        id:
          type: integer
          description: ID of the employee to delete
        delete_reason:
          type: string
          description: Reason for deleting the employee profile (optional)
          
          
    DeleteEmployeeProfileResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "Employee Deleted"
        data:
          type: array
          items: {}
        type:
          type: string



    ErrorNotFound:
      type: object
      properties:
        error:
          type: string
          description: The error message for "Not Found" error.
          example: "Project not found"
          
          
          
    Error:
      type: object
      properties:
        error_code:
          type: string
          description: A unique error code for identifying the error.
        message:
          type: string
          description: A human-readable error message.
          
        
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT